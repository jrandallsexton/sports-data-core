// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportsData.Api.Infrastructure.Data;

#nullable disable

namespace SportsData.Api.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20250910121405_10SepV2")]
    partial class _10SepV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessage", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.ContestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("OverUnder")
                        .HasColumnType("double precision");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<double?>("Spread")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("WentToOvertime")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WinningFranchiseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.HasIndex("Sport", "SeasonYear");

                    b.ToTable("ContestResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MatchupPreview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Analysis")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("ApprovedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<int?>("IterationsRequired")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OverUnderPrediction")
                        .HasColumnType("integer");

                    b.Property<string>("Overview")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("PredictedSpreadWinner")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PredictedStraightUpWinner")
                        .HasColumnType("uuid");

                    b.Property<string>("Prediction")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)");

                    b.Property<string>("PromptVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("RejectedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectionNote")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.ToTable("MatchupPreview", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessagePost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThreadId", "ParentId");

                    b.HasIndex("ThreadId", "Path");

                    b.ToTable("MessagePost", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "Type");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique();

                    b.ToTable("MessageReaction", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessageThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostCount")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "LastActivityAt");

                    b.ToTable("MessageThread", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.OutboxPing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PingedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxPings");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PointsAwarded")
                        .HasColumnType("integer");

                    b.Property<string>("RuleVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserPickId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserPickId")
                        .IsUnique();

                    b.ToTable("PickResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommissionerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DropLowWeeksCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("League")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PickType")
                        .HasColumnType("integer");

                    b.Property<int?>("RankingFilter")
                        .HasColumnType("integer");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerTiePolicy")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerType")
                        .HasColumnType("integer");

                    b.Property<bool>("UseConfidencePoints")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CommissionerUserId");

                    b.ToTable("PickemGroup", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupConference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConferenceSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId");

                    b.ToTable("PickemGroupConference", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PickemGroupId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("PickemGroupId");

                    b.HasIndex("PickemGroupId1");

                    b.ToTable("PickemGroupInvitations", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMatchup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("AwayConferenceLosses")
                        .HasColumnType("integer");

                    b.Property<int>("AwayConferenceTies")
                        .HasColumnType("integer");

                    b.Property<int>("AwayConferenceWins")
                        .HasColumnType("integer");

                    b.Property<int>("AwayLosses")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayRank")
                        .HasColumnType("integer");

                    b.Property<double?>("AwaySpread")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("AwayTies")
                        .HasColumnType("integer");

                    b.Property<int>("AwayWins")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeConferenceLosses")
                        .HasColumnType("integer");

                    b.Property<int>("HomeConferenceTies")
                        .HasColumnType("integer");

                    b.Property<int>("HomeConferenceWins")
                        .HasColumnType("integer");

                    b.Property<int>("HomeLosses")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeRank")
                        .HasColumnType("integer");

                    b.Property<double?>("HomeSpread")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("HomeTies")
                        .HasColumnType("integer");

                    b.Property<int>("HomeWins")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("OverOdds")
                        .HasColumnType("double precision");

                    b.Property<double?>("OverUnder")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("Spread")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("UnderOdds")
                        .HasColumnType("double precision");

                    b.HasKey("GroupId", "SeasonWeekId", "ContestId");

                    b.HasIndex("GroupId", "ContestId")
                        .IsUnique();

                    b.HasIndex("GroupId", "SeasonYear", "SeasonWeek");

                    b.ToTable("PickemGroupMatchup", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PickemGroupId", "UserId")
                        .IsUnique();

                    b.ToTable("PickemGroupMember", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserPick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ConfidencePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImportedFromPickId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OverUnder")
                        .HasColumnType("integer");

                    b.Property<int>("PickType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PointsAwarded")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScoredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TiebreakerActualAway")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerActualHome")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerActualTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessAway")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessHome")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessTotal")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("WasAgainstSpread")
                        .HasColumnType("boolean");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.HasIndex("PickemGroupId", "UserId", "ContestId")
                        .IsUnique();

                    b.ToTable("UserPick", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserStanding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectPicks")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WeeksWon")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId", "UserId", "SeasonYear", "SeasonWeek")
                        .IsUnique();

                    b.ToTable("LeagueStandingHistory", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeek", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AreMatchupsGenerated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "SeasonWeekId");

                    b.HasIndex("SeasonYear", "SeasonWeek");

                    b.ToTable("PickemGroupWeek", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeekResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectPicks")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsWeeklyWinner")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId", "SeasonYear", "SeasonWeek", "UserId")
                        .IsUnique();

                    b.ToTable("LeagueWeekResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsPanelPersona")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSynthetic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignInProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "sportDeets",
                            Email = "foo@bar.com",
                            EmailVerified = true,
                            FirebaseUid = "ngovRAr5E8cjMVaZNvcqN1nPFPJ2",
                            IsPanelPersona = false,
                            IsSynthetic = false,
                            LastLoginUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            SignInProvider = "password"
                        });
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessagePost", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.MessagePost", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.MessageThread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessageReaction", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.MessagePost", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessageThread", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "CommissionerUser")
                        .WithMany()
                        .HasForeignKey("CommissionerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommissionerUser");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupConference", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "PickemGroup")
                        .WithMany("Conferences")
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PickemGroupConference_PickemGroup");

                    b.Navigation("PickemGroup");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupInvitation", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany()
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", null)
                        .WithMany("Invitations")
                        .HasForeignKey("PickemGroupId1");

                    b.Navigation("Group");

                    b.Navigation("InvitedByUser");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMatchup", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeek", "GroupWeek")
                        .WithMany("Matchups")
                        .HasForeignKey("GroupId", "SeasonWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupWeek");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMember", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserPick", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany()
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeek", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany("Weeks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessagePost", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.MessageThread", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", b =>
                {
                    b.Navigation("Conferences");

                    b.Navigation("Invitations");

                    b.Navigation("Members");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeek", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("GroupMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
