// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportsData.Producer.Infrastructure.Data.Football;

#nullable disable

namespace SportsData.Producer.Migrations
{
    [DbContext(typeof(FootballDataContext))]
    [Migration("20251004094835_04OctV1_CompOvrvw")]
    partial class _04OctV1_CompOvrvw
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompetitionOdds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("CorrectedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("MoneylineWinner")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("OverOdds")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OverPriceClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OverPriceCurrent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OverPriceOpen")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("OverUnder")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("PropBetsRef")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ProviderPriority")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderRef")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal?>("Spread")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<bool?>("SpreadWinner")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TotalPointsClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("TotalPointsCurrent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("TotalPointsOpen")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("UnderOdds")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("UnderPriceClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("UnderPriceCurrent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("UnderPriceOpen")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompetitionId", "ProviderId")
                        .IsUnique();

                    b.ToTable("CompetitionOdds", (string)null);
                });

            modelBuilder.Entity("CompetitionTeamOdds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompetitionOddsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CorrectedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUnderdog")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MoneylineClose")
                        .HasColumnType("integer");

                    b.Property<int?>("MoneylineCurrent")
                        .HasColumnType("integer");

                    b.Property<int?>("MoneylineOpen")
                        .HasColumnType("integer");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal?>("SpreadPointsClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("SpreadPointsCurrent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("SpreadPointsOpen")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("SpreadPriceClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("SpreadPriceCurrent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("SpreadPriceOpen")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionOddsId", "Side")
                        .IsUnique();

                    b.ToTable("CompetitionTeamOdds", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessage", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BirthLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExperienceAbbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ExperienceDisplayValue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeightDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("HeightIn")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("WeightDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("WeightLb")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("BirthLocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Athlete", (string)null);

                    b.HasDiscriminator().HasValue("Athlete");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.AthleteExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("AthleteExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.AthleteImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalUrlHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.PrimitiveCollection<List<string>>("Rel")
                        .HasColumnType("text[]");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("OriginalUrlHash");

                    b.ToTable("AthleteImage", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.AthleteStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AthleteStatus", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Country")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGrass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.VenueExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.VenueImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalUrlHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.PrimitiveCollection<List<string>>("Rel")
                        .HasColumnType("text[]");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OriginalUrlHash");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueImage", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("AthleteSeasonId", "CompetitionId")
                        .IsUnique();

                    b.ToTable("AthleteCompetitionStatistic");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("AthleteCompetitionStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AthleteCompetitionStatisticId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteCompetitionStatisticId");

                    b.HasIndex("AthleteCompetitionStatisticId1")
                        .HasDatabaseName("IX_AthleteCompetitionStatisticCategory_AthleteCompetitionStat~1");

                    b.ToTable("AthleteCompetitionStatisticCategory");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("AthleteCompetitionStatisticCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteCompetitionStatisticCategoryId");

                    b.ToTable("AthleteCompetitionStatisticStat");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Leaf")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AthletePosition", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthletePositionExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthletePositionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthletePositionId");

                    b.ToTable("AthletePositionExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ExperienceAbbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ExperienceDisplayValue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("HeightDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("HeightIn")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Jersey")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("WeightDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("WeightLb")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("PositionId");

                    b.HasIndex("StatusId");

                    b.ToTable("AthleteSeason", (string)null);

                    b.HasDiscriminator().HasValue("AthleteSeason");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSeasonId");

                    b.ToTable("AthleteSeasonExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SplitAbbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SplitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SplitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SplitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSeasonId");

                    b.ToTable("AthleteSeasonStatistic");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AthleteSeasonStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSeasonStatisticId");

                    b.ToTable("AthleteSeasonStatisticCategory");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AthleteSeasonStatisticCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerGameDisplayValue")
                        .HasColumnType("text");

                    b.Property<decimal?>("PerGameValue")
                        .HasColumnType("numeric");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSeasonStatisticCategoryId");

                    b.ToTable("AthleteSeasonStatisticStat");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("History")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Award", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AwardExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.ToTable("AwardExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Summary")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<double?>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachRecord", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecordExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachRecordId");

                    b.ToTable("CoachRecordExternalId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecordStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CoachRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double?>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CoachRecordId");

                    b.ToTable("CoachRecordStat", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("CoachSeason", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attendance")
                        .HasColumnType("integer");

                    b.Property<int?>("BoxscoreSourceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DateValid")
                        .HasColumnType("boolean");

                    b.Property<string>("FormatOvertimeDisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FormatOvertimePeriods")
                        .HasColumnType("integer");

                    b.Property<string>("FormatOvertimeSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("FormatRegulationClock")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("FormatRegulationDisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FormatRegulationPeriods")
                        .HasColumnType("integer");

                    b.Property<string>("FormatRegulationSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("GameSourceId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDefensiveStats")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoxscoreAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBracketAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommentaryAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConferenceCompetition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConversationAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDivisionCompetition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGamecastAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighlightsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLineupAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLiveAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNeutralSite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnWatchEspn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPickCenterAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlayByPlayAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPossessionArrowAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreviewAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecapAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShotChartAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSummaryAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTicketsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimeoutsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWallClockAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("LinescoreSourceId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PlayByPlaySourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatsSourceId")
                        .HasColumnType("integer");

                    b.Property<bool>("TimeValid")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeAbbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BoxscoreSourceId");

                    b.HasIndex("ContestId");

                    b.HasIndex("GameSourceId");

                    b.HasIndex("LinescoreSourceId");

                    b.HasIndex("PlayByPlaySourceId");

                    b.HasIndex("StatsSourceId");

                    b.HasIndex("VenueId");

                    b.ToTable("Competition", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionBroadcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MarketId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MarketType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaCallLetters")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaGroupId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MediaGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MediaGroupSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MediaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MediaShortName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Partnered")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Station")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StationKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TypeLongName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TypeShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeSlug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionBroadcast", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CuratedRankCurrent")
                        .HasColumnType("integer");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("HomeAway")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("Winner")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("CompetitionId", "HomeAway")
                        .IsUnique();

                    b.HasIndex("CompetitionId", "Order")
                        .IsUnique();

                    b.ToTable("CompetitionCompetitor", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionCompetitorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorId");

                    b.ToTable("CompetitionCompetitorExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionCompetitorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("SourceDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SourceState")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorId");

                    b.ToTable("CompetitionCompetitorLineScore", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScoreExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionCompetitorLineScoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorLineScoreId");

                    b.ToTable("CompetitionCompetitorLineScoreExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionCompetitorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<bool>("Winner")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorId");

                    b.ToTable("CompetitionCompetitorScores");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScoreExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionCompetitorScoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorScoreId");

                    b.ToTable("CompetitionCompetitorScoreExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompetitionCompetitorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("FranchiseSeasonId", "CompetitionId")
                        .IsUnique();

                    b.ToTable("CompetitionCompetitorStatistics");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CompetitionCompetitorStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorStatisticId");

                    b.ToTable("CompetitionCompetitorStatisticCategories");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CompetitionCompetitorStatisticCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCompetitorStatisticCategoryId");

                    b.ToTable("CompetitionCompetitorStatisticStats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LeaderCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("LeaderCategoryId");

                    b.ToTable("CompetitionLeader", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeaderCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("lkLeaderCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "PYDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Passing Leader",
                            Name = "passingLeader",
                            ShortDisplayName = "PASS"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "RYDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Rushing Leader",
                            Name = "rushingLeader",
                            ShortDisplayName = "RUSH"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "RECYDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Receiving Leader",
                            Name = "receivingLeader",
                            ShortDisplayName = "REC"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "YDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Passing Yards",
                            Name = "passingYards",
                            ShortDisplayName = "PYDS"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "YDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Rushing Yards",
                            Name = "rushingYards",
                            ShortDisplayName = "RYDS"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "YDS",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Receiving Yards",
                            Name = "receivingYards",
                            ShortDisplayName = "RECYDS"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "TOT",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Tackles",
                            Name = "totalTackles",
                            ShortDisplayName = "TACK"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "SACK",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Sacks",
                            Name = "sacks",
                            ShortDisplayName = "SACK"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "INT",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Interceptions",
                            Name = "interceptions",
                            ShortDisplayName = "INT"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "PR",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Punt Returns",
                            Name = "puntReturns",
                            ShortDisplayName = "PR"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "KR",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Kick Returns",
                            Name = "kickReturns",
                            ShortDisplayName = "KR"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "P",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Punts",
                            Name = "punts",
                            ShortDisplayName = "P"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "TP",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Kicking Points",
                            Name = "totalKickingPoints",
                            ShortDisplayName = "TP"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "F",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Fumbles",
                            Name = "fumbles",
                            ShortDisplayName = "F"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "FL",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Fumbles Lost",
                            Name = "fumblesLost",
                            ShortDisplayName = "FL"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "CMP",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Fumbles Recovered",
                            Name = "fumblesRecovered",
                            ShortDisplayName = "CMP"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviation = "ESPNRating",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "ESPN Rating Leader",
                            Name = "espnRating",
                            ShortDisplayName = "ESPNRating"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviation = "TD",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Passing Touchdowns",
                            Name = "passingTouchdowns",
                            ShortDisplayName = "TD"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviation = "RAT",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Quarterback Rating",
                            Name = "quarterbackRating",
                            ShortDisplayName = "RAT"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviation = "TD",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Rushing Touchdowns",
                            Name = "rushingTouchdowns",
                            ShortDisplayName = "TD"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviation = "REC",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Receptions",
                            Name = "receptions",
                            ShortDisplayName = "REC"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviation = "TD",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Receiving Touchdowns",
                            Name = "receivingTouchdowns",
                            ShortDisplayName = "TD"
                        });
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeaderStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionLeaderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSeasonId");

                    b.HasIndex("CompetitionLeaderId");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("CompetitionLeaderStat", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CanonicalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Rel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionLink");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionNote");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionOddsExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionOddsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionOddsId");

                    b.ToTable("CompetitionOddsExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionOddsLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionOddsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Rel")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortText")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Text")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionOddsId", "Rel", "Href");

                    b.ToTable("CompetitionOddsLink", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternativeText")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<string>("ClockDisplayValue")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<double>("ClockValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DriveId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EndDistance")
                        .HasColumnType("integer");

                    b.Property<int?>("EndDown")
                        .HasColumnType("integer");

                    b.Property<int?>("EndYardLine")
                        .HasColumnType("integer");

                    b.Property<int?>("EndYardsToEndzone")
                        .HasColumnType("integer");

                    b.Property<string>("EspnId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean");

                    b.Property<int>("ScoreValue")
                        .HasColumnType("integer");

                    b.Property<bool>("ScoringPlay")
                        .HasColumnType("boolean");

                    b.Property<string>("SequenceNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ShortAlternativeText")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortText")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("StartDistance")
                        .HasColumnType("integer");

                    b.Property<int?>("StartDown")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StartTeamFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StartYardLine")
                        .HasColumnType("integer");

                    b.Property<int?>("StartYardsToEndzone")
                        .HasColumnType("integer");

                    b.Property<int>("StatYardage")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DriveId");

                    b.ToTable("CompetitionPlay", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlayExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionPlayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionPlayId");

                    b.ToTable("CompetitionPlayExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PowerIndexId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("PowerIndexId");

                    b.ToTable("CompetitionPowerIndex", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndexExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionPowerIndexId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionPowerIndexId");

                    b.ToTable("CompetitionPowerIndexExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHome")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId", "FranchiseSeasonId", "IsHome")
                        .IsUnique();

                    b.ToTable("CompetitionPrediction", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPredictionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionPredictionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PredictionMetricId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionPredictionId", "PredictionMetricId")
                        .IsUnique();

                    b.ToTable("CompetitionPredictionValue", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AwayWinPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("HomeWinPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("LastModifiedRaw")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PlayId")
                        .HasColumnType("uuid");

                    b.Property<int>("SecondsLeft")
                        .HasColumnType("integer");

                    b.Property<string>("SequenceNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SourceDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SourceState")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("TiePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PlayId");

                    b.ToTable("CompetitionProbability", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbabilityExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionProbabilityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionProbabilityId");

                    b.ToTable("CompetitionProbabilityExternalId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompetitionSource");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Clock")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayClock")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StatusDetail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StatusShortDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StatusState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StatusTypeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StatusTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .IsUnique();

                    b.ToTable("CompetitionStatus", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatusExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionStatusId");

                    b.ToTable("CompetitionStatusExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("AwayTeamFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNote")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("FinalizedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("HomeTeamFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OverUnder")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonPhaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SpreadWinnerFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WinnerFranchiseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamFranchiseSeasonId");

                    b.HasIndex("HomeTeamFranchiseSeasonId");

                    b.HasIndex("SeasonWeekId");

                    b.HasIndex("VenueId");

                    b.ToTable("Contest", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.ContestExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.ContestLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CanonicalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Rel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestLink");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Drive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("DisplayResult")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EndClockDisplayValue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("EndClockValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("EndDistance")
                        .HasColumnType("integer");

                    b.Property<int?>("EndDown")
                        .HasColumnType("integer");

                    b.Property<string>("EndDownDistanceText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("EndFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EndPeriodNumber")
                        .HasColumnType("integer");

                    b.Property<string>("EndPeriodType")
                        .HasColumnType("text");

                    b.Property<string>("EndShortDownDistanceText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EndText")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EndYardLine")
                        .HasColumnType("integer");

                    b.Property<int?>("EndYardsToEndzone")
                        .HasColumnType("integer");

                    b.Property<bool>("IsScore")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OffensivePlays")
                        .HasColumnType("integer");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SequenceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ShortDisplayResult")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SourceDescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StartClockDisplayValue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("StartClockValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("StartDistance")
                        .HasColumnType("integer");

                    b.Property<int?>("StartDown")
                        .HasColumnType("integer");

                    b.Property<string>("StartDownDistanceText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("StartFranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StartPeriodNumber")
                        .HasColumnType("integer");

                    b.Property<string>("StartPeriodType")
                        .HasColumnType("text");

                    b.Property<string>("StartShortDownDistanceText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StartText")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StartYardLine")
                        .HasColumnType("integer");

                    b.Property<int?>("StartYardsToEndzone")
                        .HasColumnType("integer");

                    b.Property<string>("TimeElapsedDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("TimeElapsedValue")
                        .HasColumnType("double precision");

                    b.Property<int>("Yards")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Drive", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.DriveExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DriveId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriveId");

                    b.ToTable("DriveExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Franchise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ColorCodeAltHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("ColorCodeHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DisplayNameShort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Franchise", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("FranchiseExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalUrlHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.PrimitiveCollection<List<string>>("Rel")
                        .HasColumnType("text[]");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("OriginalUrlHash");

                    b.ToTable("FranchiseLogo", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ColorCodeAltHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("ColorCodeHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<int>("ConferenceLosses")
                        .HasColumnType("integer");

                    b.Property<int>("ConferenceTies")
                        .HasColumnType("integer");

                    b.Property<int>("ConferenceWins")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DisplayNameShort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupSeasonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllStar")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ties")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("GroupSeasonId");

                    b.HasIndex("VenueId");

                    b.ToTable("FranchiseSeason", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonAward", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAwardWinner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AthleteRef")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonAwardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TeamRef")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonAwardId");

                    b.ToTable("FranchiseSeasonAwardWinner", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalUrlHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.PrimitiveCollection<List<string>>("Rel")
                        .HasColumnType("text[]");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("OriginalUrlHash");

                    b.ToTable("FranchiseSeasonLogo", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChanceToWinConference")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ChanceToWinDivision")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ProjectedLosses")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedWins")
                        .HasColumnType("numeric");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonProjection", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasMaxLength(40)
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultRanking")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasMaxLength(40)
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("ShortHeadline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("SeasonWeekId");

                    b.ToTable("FranchiseSeasonRanking", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FirstPlaceVotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("FranchiseSeasonRankingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<int>("Previous")
                        .HasColumnType("integer");

                    b.Property<string>("Trend")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonRankingId")
                        .IsUnique();

                    b.ToTable("FranchiseSeasonRankingDetail");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonRankingDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonRankingDetailId")
                        .IsUnique();

                    b.ToTable("FranchiseSeasonRankingDetailRecord");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecordStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FranchiseSeasonRankingDetailRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonRankingDetailRecordId");

                    b.ToTable("FranchiseSeasonRankingDetailRecordStat");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("RankingId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.ToTable("FranchiseSeasonRankingExternalId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RankingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.ToTable("FranchiseSeasonRankingNote");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingOccurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Last")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RankingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RankingId")
                        .IsUnique();

                    b.ToTable("FranchiseSeasonRankingOccurrence");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonRecord", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordAts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Pushes")
                        .HasColumnType("integer");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonRecordAts", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordAtsCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("lkRecordAtsCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Overall team season record against the spread",
                            Name = "atsOverall"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the favorite",
                            Name = "atsFavorite"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the underdog",
                            Name = "atsUnderdog"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the away team",
                            Name = "atsAway"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the home team",
                            Name = "atsHome"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the away favorite",
                            Name = "atsAwayFavorite"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the away underdog",
                            Name = "atsAwayUnderdog"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Team season record against the spread as the home favorite",
                            Name = "atsHomeFavorite"
                        });
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FranchiseSeasonRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonRecordId");

                    b.ToTable("FranchiseSeasonRecordStat", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("FranchiseSeasonStatisticCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PerGameDisplayValue")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal?>("PerGameValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("RankDisplayValue")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonStatisticCategoryId");

                    b.ToTable("FranchiseSeasonStatistic", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatisticCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Summary")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.ToTable("FranchiseSeasonStatisticCategory", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsConference")
                        .HasColumnType("boolean");

                    b.Property<string>("MidsizeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonYear", "Slug");

                    b.ToTable("GroupSeason", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeasonExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupSeasonId");

                    b.ToTable("GroupSeasonExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeasonLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupSeasonId")
                        .HasColumnType("uuid");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalUrlHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.PrimitiveCollection<List<string>>("Rel")
                        .HasColumnType("text[]");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupSeasonId");

                    b.HasIndex("OriginalUrlHash");

                    b.ToTable("GroupSeasonLogo", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.OutboxPing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PingedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxPings");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.PlayTypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("lkPlayType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 70,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coin Toss",
                            Name = "coinToss"
                        },
                        new
                        {
                            Id = 66,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "End of Game",
                            Name = "endOfGame"
                        },
                        new
                        {
                            Id = 65,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "End of Half",
                            Name = "endOfHalf"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "End Period",
                            Name = "endPeriod"
                        },
                        new
                        {
                            Id = 59,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Field Goal Good",
                            Name = "fieldGoalGood"
                        },
                        new
                        {
                            Id = 60,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Field Goal Missed",
                            Name = "fieldGoalMissed"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fumble Recovery (Own)",
                            Name = "fumbleRecoveryOwn"
                        },
                        new
                        {
                            Id = 53,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kickoff",
                            Name = "kickoff"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kickoff Return (Offense)",
                            Name = "kickoffReturnOffense"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pass Incompletion",
                            Name = "passIncompletion"
                        },
                        new
                        {
                            Id = 26,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pass Interception Return",
                            Name = "passInterceptionReturn"
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pass Reception",
                            Name = "passReception"
                        },
                        new
                        {
                            Id = 67,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Passing Touchdown",
                            Name = "passingTouchdown"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Penalty",
                            Name = "penalty"
                        },
                        new
                        {
                            Id = 52,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Punt",
                            Name = "punt"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rush",
                            Name = "rush"
                        },
                        new
                        {
                            Id = 68,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rushing Touchdown",
                            Name = "rushingTouchdown"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sack",
                            Name = "sack"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Timeout",
                            Name = "timeout"
                        });
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.PowerIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PowerIndex", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.PredictionMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Name", "DisplayName", "ShortDisplayName", "Abbreviation", "Description")
                        .IsUnique();

                    b.ToTable("PredictionMetric", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivePhaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivePhaseId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFuture", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonFuture", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SeasonFutureItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("SeasonFutureItemId");

                    b.ToTable("SeasonFutureBook");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonFutureId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonFutureId");

                    b.ToTable("SeasonFutureExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProviderActive")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProviderPriority")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonFutureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonFutureId");

                    b.ToTable("SeasonFutureItem");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasGroups")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLegs")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStandings")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TypeCode")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonPhase", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhaseExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonPhaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonPhaseId");

                    b.ToTable("SeasonPhaseExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPoll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SeasonPoll", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonPollId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonPollId");

                    b.ToTable("SeasonPollExternalId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastUpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OccurrenceDisplay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("OccurrenceIsLast")
                        .HasColumnType("boolean");

                    b.Property<int>("OccurrenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("OccurrenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OccurrenceValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SeasonPollId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortHeadline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonWeekId");

                    b.HasIndex("SeasonPollId", "SeasonWeekId")
                        .IsUnique();

                    b.ToTable("SeasonPollWeek", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPlaceVotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDroppedOut")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOtherReceivingVotes")
                        .HasColumnType("boolean");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Points")
                        .HasPrecision(18, 6)
                        .HasColumnType("double precision");

                    b.Property<int>("Previous")
                        .HasColumnType("integer");

                    b.Property<string>("RecordSummary")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("RowDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RowLastUpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SeasonPollWeekId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceList")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Trend")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseSeasonId");

                    b.HasIndex("SeasonPollWeekId", "FranchiseSeasonId", "SourceList")
                        .IsUnique();

                    b.ToTable("SeasonPollWeekEntry", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntryStat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeasonPollWeekEntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDisplayName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonPollWeekEntryId", "Name", "Type")
                        .IsUnique();

                    b.ToTable("SeasonPollWeekEntryStat", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonPollWeekId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonPollWeekId");

                    b.ToTable("SeasonPollWeekExternalId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonPhaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonPhaseId");

                    b.ToTable("SeasonWeek", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeekExternalId", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonWeekId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrlHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonWeekId");

                    b.ToTable("SeasonWeekExternalId", (string)null);
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Football.Entities.FootballAthlete", b =>
                {
                    b.HasBaseType("SportsData.Producer.Infrastructure.Data.Common.Athlete");

                    b.Property<Guid?>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FranchiseSeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.HasIndex("PositionId");

                    b.HasDiscriminator().HasValue("FootballAthlete");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Football.Entities.FootballAthleteSeason", b =>
                {
                    b.HasBaseType("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason");

                    b.HasDiscriminator().HasValue("FootballAthleteSeason");
                });

            modelBuilder.Entity("CompetitionOdds", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", null)
                        .WithMany("Odds")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetitionTeamOdds", b =>
                {
                    b.HasOne("CompetitionOdds", "CompetitionOdds")
                        .WithMany("Teams")
                        .HasForeignKey("CompetitionOddsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionOdds");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Athlete", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Location", "BirthLocation")
                        .WithMany()
                        .HasForeignKey("BirthLocationId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.AthleteStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("BirthLocation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.AthleteExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Athlete", "Athlete")
                        .WithMany("ExternalIds")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.AthleteImage", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Athlete", "Athlete")
                        .WithMany("Images")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.VenueExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Venue", "Venue")
                        .WithMany("ExternalIds")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.VenueImage", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Venue", null)
                        .WithMany("Images")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatistic", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", "AthleteSeason")
                        .WithMany()
                        .HasForeignKey("AthleteSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AthleteSeason");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticCategory", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatistic", "AthleteCompetitionStatistic")
                        .WithMany()
                        .HasForeignKey("AthleteCompetitionStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatistic", null)
                        .WithMany("Categories")
                        .HasForeignKey("AthleteCompetitionStatisticId1")
                        .HasConstraintName("FK_AthleteCompetitionStatisticCategory_AthleteCompetitionStat~1");

                    b.Navigation("AthleteCompetitionStatistic");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticCategory", "AthleteCompetitionStatisticCategory")
                        .WithMany("Stats")
                        .HasForeignKey("AthleteCompetitionStatisticCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteCompetitionStatisticCategory");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthletePositionExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", "AthletePosition")
                        .WithMany("ExternalIds")
                        .HasForeignKey("AthletePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthletePosition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Athlete", "Athlete")
                        .WithMany("Seasons")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.AthleteStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Athlete");

                    b.Navigation("Position");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", "AthleteSeason")
                        .WithMany("ExternalIds")
                        .HasForeignKey("AthleteSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatistic", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", "AthleteSeason")
                        .WithMany("Statistics")
                        .HasForeignKey("AthleteSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticCategory", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatistic", "Statistic")
                        .WithMany("Categories")
                        .HasForeignKey("AthleteSeasonStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statistic");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticCategory", "Category")
                        .WithMany("Stats")
                        .HasForeignKey("AthleteSeasonStatisticCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AwardExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Award", "Award")
                        .WithMany("ExternalIds")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Coach", "Coach")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecord", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Coach", "Coach")
                        .WithMany("Records")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecordExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CoachRecord", "Record")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CoachRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecordStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CoachRecord", "CoachRecord")
                        .WithMany("Stats")
                        .HasForeignKey("CoachRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachRecord");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachSeason", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Coach", "Coach")
                        .WithMany("Seasons")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Competition", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", "BoxscoreSource")
                        .WithMany()
                        .HasForeignKey("BoxscoreSourceId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Contest", "Contest")
                        .WithMany("Competitions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", "GameSource")
                        .WithMany()
                        .HasForeignKey("GameSourceId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", "LinescoreSource")
                        .WithMany()
                        .HasForeignKey("LinescoreSourceId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", "PlayByPlaySource")
                        .WithMany()
                        .HasForeignKey("PlayByPlaySourceId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionSource", "StatsSource")
                        .WithMany()
                        .HasForeignKey("StatsSourceId");

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BoxscoreSource");

                    b.Navigation("Contest");

                    b.Navigation("GameSource");

                    b.Navigation("LinescoreSource");

                    b.Navigation("PlayByPlaySource");

                    b.Navigation("StatsSource");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionBroadcast", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Broadcasts")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", null)
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", "CompetitionCompetitor")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitor");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScore", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", "CompetitionCompetitor")
                        .WithMany("LineScores")
                        .HasForeignKey("CompetitionCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitor");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScoreExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScore", "CompetitionCompetitorLineScore")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionCompetitorLineScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitorLineScore");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScore", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", "CompetitionCompetitor")
                        .WithMany("Scores")
                        .HasForeignKey("CompetitionCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitor");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScoreExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScore", "CompetitionCompetitorScore")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionCompetitorScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitorScore");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatistic", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", "CompetitionCompetitor")
                        .WithMany("Statistics")
                        .HasForeignKey("CompetitionCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("CompetitionCompetitor");

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticCategory", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatistic", "CompetitionCompetitorStatistic")
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionCompetitorStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitorStatistic");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticCategory", "CompetitionCompetitorStatisticCategory")
                        .WithMany("Stats")
                        .HasForeignKey("CompetitionCompetitorStatisticCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCompetitorStatisticCategory");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeader", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Leaders")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeaderCategory", "LeaderCategory")
                        .WithMany()
                        .HasForeignKey("LeaderCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("LeaderCategory");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeaderStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", "AthleteSeason")
                        .WithMany()
                        .HasForeignKey("AthleteSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeader", "CompetitionLeader")
                        .WithMany("Stats")
                        .HasForeignKey("CompetitionLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AthleteSeason");

                    b.Navigation("CompetitionLeader");

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLink", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Links")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionNote", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", null)
                        .WithMany("Notes")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionOddsExternalId", b =>
                {
                    b.HasOne("CompetitionOdds", "CompetitionOdds")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionOddsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionOdds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionOddsLink", b =>
                {
                    b.HasOne("CompetitionOdds", null)
                        .WithMany("Links")
                        .HasForeignKey("CompetitionOddsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlay", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Plays")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Drive", "Drive")
                        .WithMany("Plays")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Competition");

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlayExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlay", "CompetitionPlay")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionPlayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionPlay");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndex", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("PowerIndexes")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.PowerIndex", "PowerIndex")
                        .WithMany()
                        .HasForeignKey("PowerIndexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("FranchiseSeason");

                    b.Navigation("PowerIndex");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndexExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndex", "CompetitionPowerIndex")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionPowerIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionPowerIndex");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPrediction", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPredictionValue", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPrediction", null)
                        .WithMany("Values")
                        .HasForeignKey("CompetitionPredictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbability", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Probabilities")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlay", "Play")
                        .WithMany("Probabilities")
                        .HasForeignKey("PlayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Competition");

                    b.Navigation("Play");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbabilityExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbability", "CompetitionProbability")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionProbabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionProbability");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatus", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithOne("Status")
                        .HasForeignKey("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatus", "CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatusExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatus", "CompetitionStatus")
                        .WithMany("ExternalIds")
                        .HasForeignKey("CompetitionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionStatus");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Contest", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "AwayTeamFranchiseSeason")
                        .WithMany()
                        .HasForeignKey("AwayTeamFranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "HomeTeamFranchiseSeason")
                        .WithMany()
                        .HasForeignKey("HomeTeamFranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", "SeasonWeek")
                        .WithMany()
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeamFranchiseSeason");

                    b.Navigation("HomeTeamFranchiseSeason");

                    b.Navigation("SeasonWeek");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.ContestExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Contest", "Contest")
                        .WithMany("ExternalIds")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.ContestLink", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Contest", "Contest")
                        .WithMany("Links")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Drive", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Competition", "Competition")
                        .WithMany("Drives")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.DriveExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Drive", "Drive")
                        .WithMany("ExternalIds")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Franchise", "Franchise")
                        .WithMany("ExternalIds")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseLogo", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Franchise", null)
                        .WithMany("Logos")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Franchise", "Franchise")
                        .WithMany("Seasons")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", "GroupSeason")
                        .WithMany("FranchiseSeasons")
                        .HasForeignKey("GroupSeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Common.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Franchise");

                    b.Navigation("GroupSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAward", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Award", "Award")
                        .WithMany("FranchiseSeasonAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAwardWinner", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAward", "FranchiseSeasonAward")
                        .WithMany("Winners")
                        .HasForeignKey("FranchiseSeasonAwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeasonAward");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany("ExternalIds")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonLogo", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", null)
                        .WithMany("Logos")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonProjection", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "Season")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany("Rankings")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", "SeasonWeek")
                        .WithMany()
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Franchise");

                    b.Navigation("FranchiseSeason");

                    b.Navigation("SeasonWeek");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetail", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", "FranchiseSeasonRanking")
                        .WithOne("Rank")
                        .HasForeignKey("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetail", "FranchiseSeasonRankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeasonRanking");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecord", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetail", "FranchiseSeasonRankingDetail")
                        .WithOne("Record")
                        .HasForeignKey("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecord", "FranchiseSeasonRankingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeasonRankingDetail");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecordStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecord", "FranchiseSeasonRankingDetailRecord")
                        .WithMany("Stats")
                        .HasForeignKey("FranchiseSeasonRankingDetailRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeasonRankingDetailRecord");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", "Ranking")
                        .WithMany("ExternalIds")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingNote", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", "Ranking")
                        .WithMany("Notes")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingOccurrence", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", "Ranking")
                        .WithOne("Occurrence")
                        .HasForeignKey("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingOccurrence", "RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecord", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "Season")
                        .WithMany("Records")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordAts", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordAtsCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany("RecordsAts")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecordStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecord", "Record")
                        .WithMany("Stats")
                        .HasForeignKey("FranchiseSeasonRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatistic", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatisticCategory", "Category")
                        .WithMany("Stats")
                        .HasForeignKey("FranchiseSeasonStatisticCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatisticCategory", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany("Statistics")
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeasonExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", "GroupSeason")
                        .WithMany("ExternalIds")
                        .HasForeignKey("GroupSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSeason");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeasonLogo", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", null)
                        .WithMany("Logos")
                        .HasForeignKey("GroupSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Season", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", "ActivePhase")
                        .WithMany()
                        .HasForeignKey("ActivePhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActivePhase");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Season", "Season")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFuture", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureBook", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureItem", "SeasonFutureItem")
                        .WithMany("Books")
                        .HasForeignKey("SeasonFutureItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeason");

                    b.Navigation("SeasonFutureItem");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonFuture", "SeasonFuture")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonFutureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonFuture");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureItem", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonFuture", "SeasonFuture")
                        .WithMany("Items")
                        .HasForeignKey("SeasonFutureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonFuture");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Season", "Season")
                        .WithMany("Phases")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhaseExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", "SeasonPhase")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonPhase");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPoll", "Poll")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonPollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeek", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPoll", "SeasonPoll")
                        .WithMany("Weeks")
                        .HasForeignKey("SeasonPollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", "SeasonWeek")
                        .WithMany("Rankings")
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SeasonPoll");

                    b.Navigation("SeasonWeek");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntry", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", "FranchiseSeason")
                        .WithMany()
                        .HasForeignKey("FranchiseSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeek", "SeasonPollWeek")
                        .WithMany("Entries")
                        .HasForeignKey("SeasonPollWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FranchiseSeason");

                    b.Navigation("SeasonPollWeek");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntryStat", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntry", "PollWeekEntry")
                        .WithMany("Stats")
                        .HasForeignKey("SeasonPollWeekEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollWeekEntry");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeek", "Week")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonPollWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Week");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", "SeasonPhase")
                        .WithMany("Weeks")
                        .HasForeignKey("SeasonPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonPhase");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeekExternalId", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", "SeasonWeek")
                        .WithMany("ExternalIds")
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonWeek");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Football.Entities.FootballAthlete", b =>
                {
                    b.HasOne("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CompetitionOdds", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Links");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Athlete", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Images");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Common.Venue", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatistic", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteCompetitionStatisticCategory", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthletePosition", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeason", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatistic", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.AthleteSeasonStatisticCategory", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Award", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("FranchiseSeasonAwards");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Coach", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Records");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CoachRecord", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Competition", b =>
                {
                    b.Navigation("Broadcasts");

                    b.Navigation("Competitors");

                    b.Navigation("Drives");

                    b.Navigation("ExternalIds");

                    b.Navigation("Leaders");

                    b.Navigation("Links");

                    b.Navigation("Notes");

                    b.Navigation("Odds");

                    b.Navigation("Plays");

                    b.Navigation("PowerIndexes");

                    b.Navigation("Probabilities");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitor", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("LineScores");

                    b.Navigation("Scores");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorLineScore", b =>
                {
                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorScore", b =>
                {
                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatistic", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionCompetitorStatisticCategory", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionLeader", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPlay", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Probabilities");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPowerIndex", b =>
                {
                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionPrediction", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionProbability", b =>
                {
                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.CompetitionStatus", b =>
                {
                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Contest", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("ExternalIds");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Drive", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Plays");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Franchise", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Logos");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeason", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Logos");

                    b.Navigation("Rankings");

                    b.Navigation("Records");

                    b.Navigation("RecordsAts");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonAward", b =>
                {
                    b.Navigation("Winners");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRanking", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Notes");

                    b.Navigation("Occurrence")
                        .IsRequired();

                    b.Navigation("Rank")
                        .IsRequired();
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetail", b =>
                {
                    b.Navigation("Record");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRankingDetailRecord", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonRecord", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.FranchiseSeasonStatisticCategory", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.GroupSeason", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ExternalIds");

                    b.Navigation("FranchiseSeasons");

                    b.Navigation("Logos");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.Season", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Phases");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFuture", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonFutureItem", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPhase", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPoll", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeek", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("ExternalIds");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonPollWeekEntry", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SportsData.Producer.Infrastructure.Data.Entities.SeasonWeek", b =>
                {
                    b.Navigation("ExternalIds");

                    b.Navigation("Rankings");
                });
#pragma warning restore 612, 618
        }
    }
}
