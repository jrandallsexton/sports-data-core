// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportsData.Api.Infrastructure.Data;

#nullable disable

namespace SportsData.Api.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20250806124131_LatestV5")]
    partial class LatestV5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinalizedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSyncedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("OverUnder")
                        .HasColumnType("double precision");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<double?>("Spread")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("SpreadWinnerFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WinnerFranchiseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.HasIndex("Sport", "SeasonYear", "StartUtc");

                    b.ToTable("Contest", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.ContestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeFranchiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("OverUnder")
                        .HasColumnType("double precision");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<double?>("Spread")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("WentToOvertime")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WinningFranchiseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.HasIndex("Sport", "SeasonYear");

                    b.ToTable("ContestResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PointsAwarded")
                        .HasColumnType("integer");

                    b.Property<string>("RuleVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserPickId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserPickId")
                        .IsUnique();

                    b.ToTable("PickResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommissionerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("League")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PickType")
                        .HasColumnType("integer");

                    b.Property<int?>("RankingFilter")
                        .HasColumnType("integer");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerTiePolicy")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerType")
                        .HasColumnType("integer");

                    b.Property<bool>("UseConfidencePoints")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CommissionerUserId");

                    b.ToTable("PickemGroup", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupConference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConferenceSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId");

                    b.ToTable("PickemGroupConference", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupContest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId", "ContestId")
                        .IsUnique();

                    b.HasIndex("PickemGroupId", "SeasonYear", "SeasonWeek");

                    b.ToTable("PickemGroupContest", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PickemGroupId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("PickemGroupId");

                    b.HasIndex("PickemGroupId1");

                    b.ToTable("PickemGroupInvitations", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PickemGroupId", "UserId")
                        .IsUnique();

                    b.ToTable("PickemGroupMember", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserPick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ConfidencePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImportedFromPickId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OverUnder")
                        .HasColumnType("integer");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PointsAwarded")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScoredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TiebreakerActualAway")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerActualHome")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerActualTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessAway")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessHome")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreakerGuessTotal")
                        .HasColumnType("integer");

                    b.Property<int>("TiebreakerType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("WasAgainstSpread")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.HasIndex("PickemGroupId", "UserId", "ContestId")
                        .IsUnique();

                    b.ToTable("UserPick", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserStanding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectPicks")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WeeksWon")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId", "UserId", "SeasonYear", "SeasonWeek")
                        .IsUnique();

                    b.ToTable("LeagueStandingHistory", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupWeekResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CalculatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectPicks")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsWeeklyWinner")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickemGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PickemGroupId", "SeasonYear", "SeasonWeek", "UserId")
                        .IsUnique();

                    b.ToTable("LeagueWeekResult", (string)null);
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignInProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedUtc = new DateTime(2025, 8, 6, 12, 41, 31, 403, DateTimeKind.Utc).AddTicks(1620),
                            DisplayName = "Foo Bar",
                            Email = "foo@bar.com",
                            EmailVerified = true,
                            FirebaseUid = "ngovRAr5E8cjMVaZNvcqN1nPFPJ2",
                            LastLoginUtc = new DateTime(2025, 8, 6, 12, 41, 31, 403, DateTimeKind.Utc).AddTicks(1740),
                            SignInProvider = "password"
                        });
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupConference", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "PickemGroup")
                        .WithMany("Conferences")
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PickemGroupConference_PickemGroup");

                    b.Navigation("PickemGroup");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupInvitation", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany()
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", null)
                        .WithMany("Invitations")
                        .HasForeignKey("PickemGroupId1");

                    b.Navigation("Group");

                    b.Navigation("InvitedByUser");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupMember", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("PickemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroupUserPick", b =>
                {
                    b.HasOne("SportsData.Api.Infrastructure.Data.Entities.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .HasPrincipalKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.PickemGroup", b =>
                {
                    b.Navigation("Conferences");

                    b.Navigation("Invitations");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SportsData.Api.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("GroupMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
